package generator.content;

import com.squareup.javapoet.*;
import config.Package;
import dto.ColumnMetadata;
import lombok.extern.slf4j.Slf4j;

import javax.lang.model.element.Modifier;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import static config.Common.*;

public class ServiceImplGenerator {
    public ServiceImplGenerator(Map<String, LinkedList<ColumnMetadata>> metadata) {
        metadata.forEach((table, columnMetadataList) -> writeToJavaFile(Package.AUTOGENERATED_SERVICE_IMPL, TypeSpec.classBuilder(getServiceClassName(table))
                .addModifiers(Modifier.PUBLIC)
                .addSuperinterface(generateSuperInterface(table, columnMetadataList))
                .addAnnotation(Slf4j.class)
                .addField(Connection.class, "connection", Modifier.PRIVATE, Modifier.FINAL)
                .addMethods(generateMethods(table, columnMetadataList)).build()));
    }

    private Iterable<MethodSpec> generateMethods(String table, List<ColumnMetadata> columnMetadataList) {
        return Arrays.asList(generateConstructor(),
                generateMethodGetAll(table, columnMetadataList),
                generateMethodGetById(table, columnMetadataList),
                generateMethodAdd(table, columnMetadataList),
                generateMethodUpdate(table, columnMetadataList),
                generateMethodDelete(table, columnMetadataList));
    }

    private ParameterizedTypeName generateSuperInterface(String table, List<ColumnMetadata> columnMetadataList) {
        return ParameterizedTypeName.get(
                ClassName.get(Package.AUTOGENERATED_SERVICE, "ServiceTemplate"),
                getType("Dto", table),
                getPrimaryKeyColumnType(columnMetadataList));
    }

    private MethodSpec generateConstructor() {
        return MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addStatement("connection = $T.connection()", ClassName.get(Package.AUTOGENERATED_CONFIG, "DbConfig")).build();
    }

    private MethodSpec generateMethodGetAll(String table, List<ColumnMetadata> columnMetadataList) {
        return MethodSpec.methodBuilder("get")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(getType("List<Dto>", table))
                .addCode(generateCodeForMethodGetAll(table, columnMetadataList)).build();
    }

    private MethodSpec generateMethodGetById(String table, List<ColumnMetadata> columnMetadataList) {
        return MethodSpec.methodBuilder("get")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(getType("Dto", table))
                .addParameter(getIdParameter(columnMetadataList).build())
                .addCode(generateCodeForMethodGetById(table, columnMetadataList)).build();
    }

    private MethodSpec generateMethodAdd(String table, List<ColumnMetadata> columnMetadataList) {
        return MethodSpec.methodBuilder("add")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(void.class)
                .addParameter(getDtoParameter(table))
                .addCode(generateCodeForMethodAdd(table, columnMetadataList)).build();
    }

    private MethodSpec generateMethodUpdate(String table, List<ColumnMetadata> columnMetadataList) {
        return MethodSpec.methodBuilder("update")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(void.class)
                .addParameter(getIdParameter(columnMetadataList).build())
                .addParameter(getDtoParameter(table))
                .addCode(generateCodeForMethodUpdate(table, columnMetadataList)).build();
    }

    private MethodSpec generateMethodDelete(String table, List<ColumnMetadata> columnMetadataList) {
        return MethodSpec.methodBuilder("delete")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(void.class)
                .addParameter(getIdParameter(columnMetadataList).build())
                .addCode(generateCodeForMethodDelete(table, columnMetadataList)).build();
    }

    private CodeBlock generateCodeForMethodGetAll(String table, List<ColumnMetadata> columnMetadataList) {
        CodeBlock.Builder codeBlock = CodeBlock.builder()
                .addStatement("$T list = new $T<>()", getType("List<Dto>", table), LinkedList.class)
                .addStatement("var query = $S", generateQueryForMethodGetAll(table))
                .beginControlFlow(generateTryBlockWithResources("Statement"))
                .addStatement("$T rs = statement.executeQuery(query)", ResultSet.class)
                .beginControlFlow("while (rs.next())")
                .add("list.add($L.builder()", getDtoClassName(table));
        columnMetadataList.forEach(c -> codeBlock.add("\n  .$L(rs.get$L($S))", c.getName(), c.getJavaType(), c.getName()));
        codeBlock.add(".build());\n").endControlFlow().addStatement("return list").add(generateCatchBlock());
        return codeBlock.build();
    }

    private CodeBlock generateCodeForMethodGetById(String table, List<ColumnMetadata> columnMetadataList) {
        CodeBlock.Builder codeBlock = CodeBlock.builder()
                .addStatement("var query = $S", generateQueryForMethodGetById(table, columnMetadataList))
                .beginControlFlow(generateTryBlockWithResources("PreparedStatement"))
                .add(setValuesForPreparedStatementForMethodGetById(columnMetadataList))
                .addStatement("$T rs = preparedStatement.executeQuery()", ResultSet.class)
                .addStatement("rs.next()")
                .add("return $L.builder()", getDtoClassName(table));
        columnMetadataList.forEach(c -> codeBlock.add("\n  .$L(rs.get$L($S))", c.getName(), c.getJavaType(), c.getName()));
        codeBlock.add(".build();\n").add(generateCatchBlock());
        return codeBlock.build();
    }

    private CodeBlock generateCodeForMethodAdd(String table, List<ColumnMetadata> columnMetadataList) {
        return CodeBlock.builder()
                .addStatement("var query = $S", generateQueryForMethodAdd(table, columnMetadataList))
                .beginControlFlow(generateTryBlockWithResources("PreparedStatement"))
                .add(setValuesForPreparedStatementForMethodAdd(table, columnMetadataList))
                .add(generateCatchBlock()).build();
    }

    private CodeBlock generateCodeForMethodUpdate(String table, List<ColumnMetadata> columnMetadataList) {
        return CodeBlock.builder()
                .addStatement("var query = $S", generateQueryForMethodUpdate(table, columnMetadataList))
                .beginControlFlow(generateTryBlockWithResources("PreparedStatement"))
                .add(setValuesForPreparedStatementForMethodUpdate(table, columnMetadataList))
                .add(generateCatchBlock()).build();
    }

    private CodeBlock generateCodeForMethodDelete(String table, List<ColumnMetadata> columnMetadataList) {
        return CodeBlock.builder()
                .addStatement("var query = $S", generateQueryForMethodDelete(table, columnMetadataList))
                .beginControlFlow(generateTryBlockWithResources("PreparedStatement"))
                .add(setValuesForPreparedStatementForMethodDelete(columnMetadataList))
                .add(generateCatchBlock()).build();
    }

    private String generateTryBlockWithResources(String resources) {
        if (resources.equals("Statement"))
            return "try (var statement = connection.createStatement())";
        else if (resources.equals("PreparedStatement"))
            return "try (var preparedStatement = connection.prepareStatement(query))";
        else
            return null;
    }

    private CodeBlock generateCatchBlock() {
        return CodeBlock.builder()
                .nextControlFlow("catch ($T sqlException)", SQLException.class)
                .addStatement("log.error(sqlException.getMessage())")
                .addStatement("throw new RuntimeException()")
                .endControlFlow().build();
    }

    private String generateQueryForMethodGetAll(String table) {
        return "SELECT * FROM " + table;
    }

    private String generateQueryForMethodGetById(String table, List<ColumnMetadata> columnMetadataList) {
        return "SELECT * FROM " + table + " WHERE " + table + "." + getPrimaryKeyColumn(columnMetadataList).getName() + " = ?";
    }

    private String generateQueryForMethodAdd(String table, List<ColumnMetadata> columnMetadataList) {
        var query = new StringBuilder();
        var columns = new StringBuilder();
        var values = new StringBuilder();

        columns.append(" (");
        values.append(" (");
        var flag = false;
        for (ColumnMetadata c : columnMetadataList) {
            if (flag) {
                columns.append(", ");
                values.append(", ");
            }
            columns.append(c.getName());
            values.append("?");
            flag = true;
        }
        columns.append(") ");
        values.append(")");
        query.append("INSERT INTO ");
        query.append(table);
        query.append(columns);
        query.append("VALUES");
        query.append(values);
        return query.toString();
    }

    private String generateQueryForMethodUpdate(String table, List<ColumnMetadata> columnMetadataList) {
        var query = new StringBuilder();

        query.append("UPDATE ");
        query.append(table);
        query.append(" SET");
        var flag = false;
        for (ColumnMetadata c : columnMetadataList) {
            if (flag) {
                query.append(",");
            }
            query.append(" ").append(c.getName());
            query.append(" = ?");
            flag = true;
        }
        query.append(" WHERE ");
        query.append(getPrimaryKeyColumn(columnMetadataList).getName());
        query.append(" = ?");
        return query.toString();
    }

    private String generateQueryForMethodDelete(String table, List<ColumnMetadata> columnMetadataList) {
        return "DELETE FROM " + table + " WHERE " + getPrimaryKeyColumn(columnMetadataList).getName() + " = ?";
    }

    private CodeBlock setValuesForPreparedStatementForMethodGetById(List<ColumnMetadata> columnMetadataList) {
        return CodeBlock.builder().addStatement("preparedStatement.set$L(1, id)", getPrimaryKeyColumn(columnMetadataList).getJavaType()).build();
    }

    private CodeBlock setValuesForPreparedStatementForMethodAdd(String table, List<ColumnMetadata> columnMetadataList) {
        var codeBlock = CodeBlock.builder();
        var parameterIndex = 1;
        for (ColumnMetadata c : columnMetadataList) {
            codeBlock.addStatement("preparedStatement.set$L($L, $L.get$L())", c.getJavaType(), parameterIndex++, getDtoObjectName(table), c.getName());
        }
        codeBlock.addStatement("preparedStatement.executeUpdate()");
        return codeBlock.build();
    }

    private CodeBlock setValuesForPreparedStatementForMethodUpdate(String table, List<ColumnMetadata> columnMetadataList) {
        var codeBlock = CodeBlock.builder();
        var parameterIndex = 1;
        for (ColumnMetadata c : columnMetadataList) {
            codeBlock.addStatement("preparedStatement.set$L($L, $L.get$L())", c.getJavaType(), parameterIndex++, getDtoObjectName(table), c.getName());
        }
        codeBlock.addStatement("preparedStatement.set$L($L, id)", getPrimaryKeyColumn(columnMetadataList).getJavaType(), parameterIndex);
        codeBlock.addStatement("preparedStatement.executeUpdate()");
        return codeBlock.build();
    }

    private CodeBlock setValuesForPreparedStatementForMethodDelete(List<ColumnMetadata> columnMetadataList) {
        return CodeBlock.builder()
                .addStatement("preparedStatement.set$L(1, id)", getPrimaryKeyColumn(columnMetadataList).getJavaType())
                .addStatement("preparedStatement.executeUpdate()").build();
    }
}