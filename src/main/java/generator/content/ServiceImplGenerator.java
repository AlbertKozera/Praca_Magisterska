package generator.content;

import com.squareup.javapoet.*;
import config.Common;
import config.Package;
import dto.ColumnMetadata;
import lombok.extern.slf4j.Slf4j;

import javax.lang.model.element.Modifier;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

public class ServiceImplGenerator {
    private final Map<String, LinkedList<ColumnMetadata>> metadata;

    public ServiceImplGenerator(Map<String, LinkedList<ColumnMetadata>> metadata) {
        this.metadata = metadata;
    }

    public void generateServiceImpl() {
        metadata.forEach((table, columnMetadataList) -> {
            ParameterizedTypeName serviceTemplate = ParameterizedTypeName.get(
                    ClassName.get("autogenerated.service", "ServiceTemplate"),
                    TypeVariableName.get(Common.capitalizeFirstLetter(table)),
                    TypeName.get(Common.getTypeClassByName(getPrimaryKeyColumn(columnMetadataList).getJavaTypePackage())));
            MethodSpec constructor = MethodSpec
                    .constructorBuilder()
                    .addModifiers(Modifier.PUBLIC)
                    .addStatement("connection = $T.connection()", ClassName.get("autogenerated.config", "DbCon"))
                    .build();
            TypeSpec typeSpec = TypeSpec
                    .classBuilder(Common.capitalizeFirstLetter(table) + "Service")
                    .addModifiers(Modifier.PUBLIC)
                    .addSuperinterface(serviceTemplate)
                    .addAnnotation(Slf4j.class)
                    .addField(Connection.class, "connection", Modifier.PRIVATE, Modifier.FINAL)
                    .addMethod(constructor)
                    .addMethod(generateMethodGetAll(table, columnMetadataList))
                    .addMethod(generateMethodGetById(table, columnMetadataList))
                    .addMethod(generateMethodAdd(table, columnMetadataList))
                    .addMethod(generateMethodUpdate(table, columnMetadataList))
                    .addMethod(generateMethodDelete(table, columnMetadataList))
                    .build();
            Common.writeToJavaFile(Package.AUTOGENERATED_SERVICE_IMPL, typeSpec);
            generateMethodAdd(table, columnMetadataList);
        });
    }

    private MethodSpec generateMethodGetAll(String table, List<ColumnMetadata> columnMetadataList) {
        TypeName listOfDto = ParameterizedTypeName.get(
                ClassName.get(List.class),
                ClassName.get("autogenerated.dto", Common.capitalizeFirstLetter(table)));
        CodeBlock.Builder codeBlock = CodeBlock
                .builder()
                .addStatement("$T list = new $T<>()", listOfDto, ArrayList.class)
                .addStatement("var query = \"SELECT * FROM $L\"", table)
                .beginControlFlow("try (var statement = connection.createStatement())")
                .addStatement("$T rs = statement.executeQuery(query)", ResultSet.class)
                .beginControlFlow("while (rs.next())")
                .add("list.add($L\n  .builder()", Common.capitalizeFirstLetter(table));
        columnMetadataList.forEach(c -> codeBlock
                .add("\n  .$L(rs.get$L($S))", c.getName(), c.getJavaType(), c.getName()));
        codeBlock
                .add("\n  .build());\n")
                .endControlFlow()
                .addStatement("return list")
                .nextControlFlow("catch ($T sqlException)", SQLException.class)
                .addStatement("log.error(sqlException.getMessage())")
                .addStatement("throw new RuntimeException()")
                .endControlFlow();
        MethodSpec methodSpec = MethodSpec
                .methodBuilder("get")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(listOfDto)
                .addCode(codeBlock.build())
                .build();
        return methodSpec;
    }

    private MethodSpec generateMethodGetById(String table, List<ColumnMetadata> columnMetadataList) {
        CodeBlock.Builder codeBlock = CodeBlock
                .builder()
                .addStatement("var query = \"SELECT * FROM $L WHERE $L.$L = ?\"", table, table, getPrimaryKeyColumn(columnMetadataList).getName())
                .beginControlFlow("try (var preparedStatement = connection.prepareStatement(query))")
                .addStatement("preparedStatement.set$L(1, id)", getPrimaryKeyColumn(columnMetadataList).getJavaType())
                .addStatement("$T rs = preparedStatement.executeQuery()", ResultSet.class)
                .addStatement("rs.next()")
                .add("return $L\n  .builder()", Common.capitalizeFirstLetter(table));
        columnMetadataList.forEach(c -> codeBlock
                .add("\n  .$L(rs.get$L($S))", c.getName(), c.getJavaType(), c.getName()));
        codeBlock
                .add("\n  .build();\n")
                .nextControlFlow("catch ($T sqlException)", SQLException.class)
                .addStatement("log.error(sqlException.getMessage())")
                .addStatement("throw new RuntimeException()")
                .endControlFlow();
        MethodSpec methodSpec = MethodSpec
                .methodBuilder("get")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(ClassName.get("autogenerated.dto", Common.capitalizeFirstLetter(table)))
                .addParameter(Common.getTypeClassByName(getPrimaryKeyColumn(columnMetadataList).getJavaTypePackage()), "id")
                .addCode(codeBlock.build())
                .build();
        return methodSpec;
    }

    private MethodSpec generateMethodAdd(String table, List<ColumnMetadata> columnMetadataList) {
        CodeBlock.Builder codeBlock = CodeBlock
                .builder()
                .addStatement("var query = $S", generateQueryForMethodAdd(table, columnMetadataList))
                .beginControlFlow("try (var preparedStatement = connection.prepareStatement(query))")
                .add(generatePreparedStatementForMethodAdd(table, columnMetadataList))
                .nextControlFlow("catch ($T sqlException)", SQLException.class)
                .addStatement("log.error(sqlException.getMessage())")
                .addStatement("throw new RuntimeException()")
                .endControlFlow();
        MethodSpec methodSpec = MethodSpec
                .methodBuilder("add")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(void.class)
                .addParameter(ClassName.get("autogenerated.dto", Common.capitalizeFirstLetter(table)), table.toLowerCase())
                .addCode(codeBlock.build())
                .build();
        return methodSpec;
    }

    private MethodSpec generateMethodUpdate(String table, List<ColumnMetadata> columnMetadataList) {
        CodeBlock.Builder codeBlock = CodeBlock
                .builder()
                .addStatement("var query = $S", generateQueryForMethodUpdate(table, columnMetadataList))
                .beginControlFlow("try (var preparedStatement = connection.prepareStatement(query))")
                .add(generatePreparedStatementForMethodUpdate(table, columnMetadataList))
                .nextControlFlow("catch ($T sqlException)", SQLException.class)
                .addStatement("log.error(sqlException.getMessage())")
                .addStatement("throw new RuntimeException()")
                .endControlFlow();
        MethodSpec methodSpec = MethodSpec
                .methodBuilder("update")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(void.class)
                .addParameter(Common.getTypeClassByName(getPrimaryKeyColumn(columnMetadataList).getJavaTypePackage()), "id")
                .addParameter(ClassName.get("autogenerated.dto", Common.capitalizeFirstLetter(table)), table.toLowerCase())
                .addCode(codeBlock.build())
                .build();
        return methodSpec;
    }

    private MethodSpec generateMethodDelete(String table, List<ColumnMetadata> columnMetadataList) {
        CodeBlock.Builder codeBlock = CodeBlock
                .builder()
                .addStatement("var query = $S", generateQueryForMethodDelete(table, columnMetadataList))
                .beginControlFlow("try (var preparedStatement = connection.prepareStatement(query))")
                .add(generatePreparedStatementForMethodDelete(columnMetadataList))
                .nextControlFlow("catch ($T sqlException)", SQLException.class)
                .addStatement("log.error(sqlException.getMessage())")
                .addStatement("throw new RuntimeException()")
                .endControlFlow();
        MethodSpec methodSpec = MethodSpec
                .methodBuilder("delete")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(void.class)
                .addParameter(Common.getTypeClassByName(getPrimaryKeyColumn(columnMetadataList).getJavaTypePackage()), "id")
                .addCode(codeBlock.build())
                .build();
        return methodSpec;
    }

























    private ColumnMetadata getPrimaryKeyColumn(List<ColumnMetadata> columnMetadataList) {
        return columnMetadataList.stream().filter(ColumnMetadata::isPrimaryKey).findFirst().orElseThrow(RuntimeException::new);
    }

    private String generateQueryForMethodAdd(String table, List<ColumnMetadata> columnMetadataList) {
        var query = new StringBuilder();
        var columns = new StringBuilder();
        var values = new StringBuilder();

        columns.append(" (");
        values.append(" (");
        var flag = false;
        for (ColumnMetadata c : columnMetadataList) {
            if (flag) {
                columns.append(", ");
                values.append(", ");
            }
            columns.append(c.getName());
            values.append("?");
            flag = true;
        }
        columns.append(") ");
        values.append(")");
        query.append("INSERT INTO ");
        query.append(Common.capitalizeFirstLetter(table));
        query.append(columns);
        query.append("VALUES");
        query.append(values);
        return query.toString();
    }

    private String generateQueryForMethodUpdate(String table, List<ColumnMetadata> columnMetadataList) {
        var query = new StringBuilder();

        query.append("UPDATE ");
        query.append(table);
        query.append(" SET");
        var flag = false;
        for (ColumnMetadata c : columnMetadataList) {
            if (flag) {
                query.append(",");
            }
            query.append(" ").append(c.getName());
            query.append(" = ?");
            flag = true;
        }
        query.append(" WHERE ");
        query.append(getPrimaryKeyColumn(columnMetadataList).getName());
        query.append(" = ?");
        return query.toString();
    }

    private String generateQueryForMethodDelete(String table, List<ColumnMetadata> columnMetadataList) {
        return "DELETE FROM " + table + " WHERE " + getPrimaryKeyColumn(columnMetadataList).getName() + " = ?";
    }

    private CodeBlock generatePreparedStatementForMethodAdd(String table, List<ColumnMetadata> columnMetadataList) {
        var codeBlock = CodeBlock.builder();
        var parameterIndex = 1;
        for (ColumnMetadata c : columnMetadataList) {
            codeBlock.addStatement("preparedStatement.set$L($L, $L.get$L())", c.getJavaType(), parameterIndex++, table.toLowerCase(), c.getName());
        }
        codeBlock.addStatement("preparedStatement.executeUpdate()");
        return codeBlock.build();
    }

    private CodeBlock generatePreparedStatementForMethodUpdate(String table, List<ColumnMetadata> columnMetadataList) {
        var codeBlock = CodeBlock.builder();
        var parameterIndex = 1;
        for (ColumnMetadata c : columnMetadataList) {
            codeBlock.addStatement("preparedStatement.set$L($L, $L.get$L())", c.getJavaType(), parameterIndex++, table.toLowerCase(), c.getName());
        }
        codeBlock.addStatement("preparedStatement.executeUpdate()");
        return codeBlock.build();
    }

    private CodeBlock generatePreparedStatementForMethodDelete(List<ColumnMetadata> columnMetadataList) {
        return CodeBlock.builder()
                .addStatement("preparedStatement.set$L(1, id)", getPrimaryKeyColumn(columnMetadataList).getJavaType())
                .addStatement("preparedStatement.executeUpdate()").build();
    }

}
