package generator.content;

import com.squareup.javapoet.*;
import config.Package;
import dto.ColumnMetadata;

import javax.lang.model.element.Modifier;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import static config.Common.*;

public class ControllerGenerator {
    private final Map<String, LinkedList<ColumnMetadata>> metadata;

    public ControllerGenerator(Map<String, LinkedList<ColumnMetadata>> metadata) {
        this.metadata = metadata;
    }

    public void generateController() {
        metadata.forEach((table, columnMetadataList) -> {
            writeToJavaFile(Package.AUTOGENERATED_CONTROLLER, TypeSpec.classBuilder(getControllerClassName(table))
                    .addModifiers(Modifier.PUBLIC)
                    .addAnnotation(AnnotationSpec.builder(Path.class).addMember("value", "\"/$L\"", table.toLowerCase()).build())
                    .addField(getServiceInitialization(table))
                    .addMethods(generateMethods(table, columnMetadataList)).build());
        });
    }

    private Iterable<MethodSpec> generateMethods(String table, List<ColumnMetadata> columnMetadataList) {
        return Arrays.asList(generateConstructor(table),
                generateMethodGetAll(table),
                generateMethodGetById(table, columnMetadataList),
                generateMethodAdd(table),
                generateMethodUpdate(table, columnMetadataList),
                generateMethodDelete(table, columnMetadataList));
    }

    private MethodSpec generateMethodGetAll(String table) {
        return MethodSpec.methodBuilder("get")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(GET.class)
                .addAnnotation(AnnotationSpec.builder(Produces.class).addMember("value", "$T.$L", MediaType.class, "APPLICATION_JSON").build())
                .returns(getType("List<Dto>", table))
                .addStatement("return $L.get()", getServiceObjectName(table)).build();
    }

    private MethodSpec generateMethodGetById(String table, List<ColumnMetadata> columnMetadataList) {
        return MethodSpec.methodBuilder("get")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(GET.class)
                .addAnnotation(AnnotationSpec.builder(Path.class).addMember("value", "$S", "/{id}").build())
                .addAnnotation(AnnotationSpec.builder(Produces.class).addMember("value", "$T.$L", MediaType.class, "APPLICATION_JSON").build())
                .returns(getType("Dto", table))
                .addParameter(generateIdParameter(columnMetadataList))
                .addStatement("return $L.get(id)", getServiceObjectName(table)).build();
    }

    private MethodSpec generateMethodAdd(String table) {
        return MethodSpec.methodBuilder("add")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(POST.class)
                .addAnnotation(AnnotationSpec.builder(Consumes.class).addMember("value", "$T.$L", MediaType.class, "APPLICATION_JSON").build())
                .returns(Response.class)
                .addParameter(generateDtoParameter(table))
                .addStatement("$L.add($L)", getServiceObjectName(table), getDtoObjectName(table))
                .addStatement("return Response.status(Response.Status.CREATED).build()").build();
    }

    private MethodSpec generateMethodUpdate(String table, List<ColumnMetadata> columnMetadataList) {
        return MethodSpec.methodBuilder("update")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(PUT.class)
                .addAnnotation(AnnotationSpec.builder(Path.class).addMember("value", "$S", "/{id}").build())
                .addAnnotation(AnnotationSpec.builder(Consumes.class).addMember("value", "$T.$L", MediaType.class, "APPLICATION_JSON").build())
                .returns(void.class)
                .addParameter(generateIdParameter(columnMetadataList))
                .addParameter(generateDtoParameter(table))
                .addStatement("$L.update(id, $L)", getServiceObjectName(table), getDtoObjectName(table)).build();
    }

    private MethodSpec generateMethodDelete(String table, List<ColumnMetadata> columnMetadataList) {
        return MethodSpec.methodBuilder("delete")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(DELETE.class)
                .addAnnotation(AnnotationSpec.builder(Path.class).addMember("value", "$S", "/{id}").build())
                .returns(void.class)
                .addParameter(generateIdParameter(columnMetadataList))
                .addStatement("$L.delete(id)", getServiceObjectName(table)).build();
    }

    private MethodSpec generateConstructor(String table) {
        return MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addStatement("$L = new $L()", getServiceObjectName(table), getServiceClassName(table)).build();
    }

    private FieldSpec getServiceInitialization(String table) {
        return FieldSpec.builder(ClassName.get(Package.AUTOGENERATED_SERVICE_IMPL, getServiceClassName(table)), getServiceObjectName(table), Modifier.PRIVATE).build();
    }

    private ParameterSpec generateIdParameter(List<ColumnMetadata> columnMetadataList) {
        return ParameterSpec.builder(getPrimaryKeyColumnType(columnMetadataList), "id")
                .addAnnotation(AnnotationSpec.builder(PathParam.class).addMember("value", "$S", "id").build()).build();
    }

    private ParameterSpec generateDtoParameter(String table) {
        return ParameterSpec.builder(getType("Dto", table), getDtoObjectName(table)).build();
    }

    private String getControllerClassName(String table) {
        return capitalizeFirstLetter(table) + "Controller";
    }

    private String getServiceClassName(String table) {
        return capitalizeFirstLetter(table) + "Service";
    }

    private String getServiceObjectName(String table) {
        return table.toLowerCase() + "Service";
    }

    private String getDtoObjectName(String table) {
        return table.toLowerCase();
    }
}
