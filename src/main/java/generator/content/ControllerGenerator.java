package generator.content;

import com.squareup.javapoet.*;
import config.Common;
import config.Package;
import dto.ColumnMetadata;

import javax.lang.model.element.Modifier;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;


public class ControllerGenerator {
    private final Map<String, LinkedList<ColumnMetadata>> metadata;

    public ControllerGenerator(Map<String, LinkedList<ColumnMetadata>> metadata) {
        this.metadata = metadata;
    }

    public void generateController() {
        metadata.forEach((table, columnMetadataList) -> {
            AnnotationSpec path = AnnotationSpec.builder(Path.class).addMember("value", "\"/$L\"", table.toLowerCase()).build();
            var dtoServiceClassName = ClassName.get("autogenerated.service.impl", Common.capitalizeFirstLetter(table) + "Service");
            FieldSpec dtoService = FieldSpec.builder(dtoServiceClassName, table.toLowerCase() + "Service", Modifier.PRIVATE).build();
            MethodSpec constructor = MethodSpec
                    .constructorBuilder()
                    .addModifiers(Modifier.PUBLIC)
                    .addStatement(table.toLowerCase() + "Service" + " = new $L()", Common.capitalizeFirstLetter(table) + "Service")
                    .build();
            Common.writeToJavaFile(Package.AUTOGENERATED_CONTROLLER, TypeSpec
                    .classBuilder(Common.capitalizeFirstLetter(table) + "Controller")
                    .addModifiers(Modifier.PUBLIC)
                    .addAnnotation(path)
                    .addField(dtoService)
                    .addMethod(constructor)
                    .addMethod(generateMethodGetAll(table))
                    .addMethod(generateMethodGetById(table, columnMetadataList))
                    .addMethod(generateMethodAdd(table))
                    .addMethod(generateMethodUpdate(table, columnMetadataList))
                    .addMethod(generateMethodDelete(table, columnMetadataList))
                    .build());
        });
    }

    private MethodSpec generateMethodGetAll(String table) {
        TypeName listOfDto = ParameterizedTypeName.get(
                ClassName.get(List.class),
                ClassName.get("autogenerated.dto", Common.capitalizeFirstLetter(table)));
        return MethodSpec
                .methodBuilder("get")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(GET.class)
                .addAnnotation(AnnotationSpec.builder(Produces.class).addMember("value", "$T.$L", MediaType.class, "APPLICATION_JSON").build())
                .returns(listOfDto)
                .addStatement("return $LService.get()", table.toLowerCase())
                .build();
    }

    private MethodSpec generateMethodGetById(String table, List<ColumnMetadata> columnMetadataList) {
        return MethodSpec
                .methodBuilder("get")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(GET.class)
                .addAnnotation(AnnotationSpec.builder(Path.class).addMember("value", "$S", "/{id}").build())
                .addAnnotation(AnnotationSpec.builder(Produces.class).addMember("value", "$T.$L", MediaType.class, "APPLICATION_JSON").build())
                .returns(ClassName.get("autogenerated.dto", Common.capitalizeFirstLetter(table)))
                .addParameter(getParameterForMethodGetById(columnMetadataList))
                .addStatement("return $LService.get(id)", table.toLowerCase())
                .build();
    }

    private MethodSpec generateMethodAdd(String table) {
        return MethodSpec
                .methodBuilder("add")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(POST.class)
                .addAnnotation(AnnotationSpec.builder(Consumes.class).addMember("value", "$T.$L", MediaType.class, "APPLICATION_JSON").build())
                .returns(Response.class)
                .addParameter(getParameterForMethodAdd(table))
                .addStatement(table.toLowerCase() + "Service.add(" + table.toLowerCase() + ")")
                .addStatement("return $T.status(Response.Status.CREATED).build()", Response.class)
                .build();
    }

    private MethodSpec generateMethodUpdate(String table, List<ColumnMetadata> columnMetadataList) {
        return MethodSpec
                .methodBuilder("update")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(PUT.class)
                .addAnnotation(AnnotationSpec.builder(Path.class).addMember("value", "$S", "/{id}").build())
                .addAnnotation(AnnotationSpec.builder(Consumes.class).addMember("value", "$T.$L", MediaType.class, "APPLICATION_JSON").build())
                .returns(void.class)
                .addParameters(getParametersForMethodUpdate(table, columnMetadataList))
                .addStatement(table.toLowerCase() + "Service.update(id, " + table.toLowerCase() + ")")
                .build();
    }

    private MethodSpec generateMethodDelete(String table, List<ColumnMetadata> columnMetadataList) {
        return MethodSpec
                .methodBuilder("delete")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(DELETE.class)
                .addAnnotation(AnnotationSpec.builder(Path.class).addMember("value", "$S", "/{id}").build())
                .returns(void.class)
                .addParameter(getParameterForMethodDelete(columnMetadataList))
                .addStatement(table.toLowerCase() + "Service.delete(id)")
                .build();
    }


    private ColumnMetadata getPrimaryKeyColumn(List<ColumnMetadata> columnMetadataList) {
        return columnMetadataList.stream().filter(ColumnMetadata::isPrimaryKey).findFirst().orElseThrow(RuntimeException::new);
    }



    private AnnotationSpec getPathParamAnnotation() {
        return AnnotationSpec.builder(PathParam.class).addMember("value", "$S", "id").build();
    }




    private ParameterSpec getParameterForMethodGetById(List<ColumnMetadata> columnMetadataList) {
        return ParameterSpec.builder(Common.getTypeClassByName(getPrimaryKeyColumn(columnMetadataList).getJavaTypePackage()), "id").addAnnotation(getPathParamAnnotation()).build();
    }

    private ParameterSpec getParameterForMethodAdd(String table) {
        return ParameterSpec.builder(ClassName.get("autogenerated.dto", Common.capitalizeFirstLetter(table)), table.toLowerCase()).build();
    }

    private Iterable<ParameterSpec> getParametersForMethodUpdate(String table, List<ColumnMetadata> columnMetadataList) {
        ParameterSpec id = ParameterSpec.builder(Common.getTypeClassByName(getPrimaryKeyColumn(columnMetadataList).getJavaTypePackage()), "id").addAnnotation(getPathParamAnnotation()).build();
        ParameterSpec dto = ParameterSpec.builder(ClassName.get("autogenerated.dto", Common.capitalizeFirstLetter(table)), table.toLowerCase()).build();
        return Arrays.asList(id, dto);
    }

    private ParameterSpec getParameterForMethodDelete(List<ColumnMetadata> columnMetadataList) {
        return ParameterSpec.builder(Common.getTypeClassByName(getPrimaryKeyColumn(columnMetadataList).getJavaTypePackage()), "id").addAnnotation(getPathParamAnnotation()).build();
    }

}
