package generator.content;

import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.TypeSpec;
import config.Common;
import config.Package;
import dto.ColumnMetadata;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import javax.lang.model.element.Modifier;
import java.util.*;

@Slf4j
public class DtoGenerator {
    private final Map<String, LinkedList<ColumnMetadata>> metadata;

    public DtoGenerator(Map<String, LinkedList<ColumnMetadata>> metadata) {
        this.metadata = metadata;
    }

    public void generateDto() {
        metadata.forEach((table, columnMetadataList) -> {
            TypeSpec typeSpec = TypeSpec
                    .classBuilder(Common.capitalizeFirstLetter(table))
                    .addModifiers(Modifier.PUBLIC)
                    .addAnnotation(NoArgsConstructor.class)
                    .addAnnotation(AllArgsConstructor.class)
                    .addAnnotation(Data.class)
                    .addAnnotation(Builder.class)
                    .addFields(generateFields(columnMetadataList))
                    .build();
            Common.writeToJavaFile(Package.AUTOGENERATED_DTO, typeSpec);
        });
    }

    private Iterable<FieldSpec> generateFields(List<ColumnMetadata> columnMetadataList) {
        List<FieldSpec> fieldsList = new ArrayList<>();
        columnMetadataList.forEach(c -> {
            try {
                fieldsList.add(FieldSpec
                        .builder(Class.forName(c.getJavaTypePackage()), c.getName())
                        .addModifiers(Modifier.PRIVATE)
                        .build());
            } catch (ClassNotFoundException e) {
                log.error(e.getMessage());
                throw new RuntimeException();
            }
        });
        return fieldsList;
    }

}
