package generator.content;

import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.TypeSpec;
import config.Common;
import config.Package;
import dto.ColumnMetadata;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.lang.model.element.Modifier;
import java.util.*;

public class DtoGenerator {
    private final Map<String, LinkedList<ColumnMetadata>> metadata;

    public DtoGenerator(Map<String, LinkedList<ColumnMetadata>> metadata) {
        this.metadata = metadata;
    }

    public void generateDto() {
        metadata.forEach((table, columnMetadataList) -> Common.writeToJavaFile(Package.AUTOGENERATED_DTO, TypeSpec
                .classBuilder(Common.capitalizeFirstLetter(table))
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(NoArgsConstructor.class)
                .addAnnotation(AllArgsConstructor.class)
                .addAnnotation(Data.class)
                .addAnnotation(Builder.class)
                .addFields(generateFields(columnMetadataList))
                .build()));
    }

    private Iterable<FieldSpec> generateFields(List<ColumnMetadata> columnMetadataList) {
        List<FieldSpec> fieldsList = new ArrayList<>();
        columnMetadataList.forEach(c -> fieldsList.add(FieldSpec
                .builder(Common.getClassByName(c.getJavaTypePackage()), c.getName())
                .addModifiers(Modifier.PRIVATE)
                .build()));
        return fieldsList;
    }
}
