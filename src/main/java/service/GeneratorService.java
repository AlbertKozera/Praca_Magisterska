package service;

import config.DbConfig;
import config.Path;
import dto.ColumnMetadata;
import dto.Config;
import generator.content.*;
import generator.structure.DirectoryCreator;
import generator.structure.FileGenerator;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.Map;

@Slf4j
public class GeneratorService {
    ServerService serverService = new ServerService();

    public GeneratorService() {
        var config = LoaderService.loadConfigFile();
        generate(config);
        serverService.serverStart(config);
    }

    public void generate(Config config) {
        deleteAutogeneratedDirectory();
        new DirectoryCreator();
        new FileGenerator(getMetadata(config));
        new ConfigGenerator(config);
        new DtoGenerator(getMetadata(config));
        new ServiceGenerator();
        new ServiceImplGenerator(getMetadata(config));
        new ControllerGenerator(getMetadata(config));
        new UriContainerGenerator(getMetadata(config), config);
    }

    private Map<String, LinkedList<ColumnMetadata>> getMetadata(Config config) {
        var connection = DbConfig.connection(config.getJdbcDriverPath(), config.getDriverClassName(), config.getUrl(), config.getUsername(), config.getPassword());
        try {
            var metadataService = new MetadataService();
            return metadataService.getMetadata(connection, config);
        } catch (SQLException sqlException) {
            log.error(sqlException.getMessage());
            throw new RuntimeException();
        }
    }

    private void deleteAutogeneratedDirectory() {
        try {
            FileUtils.deleteDirectory(new File(Path.AUTOGENERATED));
            log.info("Directory " + Path.AUTOGENERATED + " has been deleted");
        } catch (IOException e) {
            log.info(e.getMessage());
        }
    }
}
